<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <entity class="com.ProyectoTDSBackend.models.Factura">
        <named-native-query name="Factura.getPdfFacturaUsuario" result-set-mapping="getPdfFacturaUsuario">
            <query>
                SELECT f.fecha as fecha, us.identificacion as identificacion, us.nombres as nombres, us.celular as celular, us.email as email, f.id_factura as id_factura,
                    cl.id_cliente as id_cliente,p.precio_producto as precio_producto, p.nombre_producto as nombre_producto, us.direccion as direccion,cf.cantidad as cantidad, cf.descuento as descuento, cf.iva as iva, cf.subtotal as subtotal, cf.total as total
                FROM usuario us JOIN cliente cl
                ON us.id = cl.id_persona JOIN factura f
                ON f.id_cliente = cl.id_cliente JOIN cuerpo_factura cf
                ON f.id_factura = cf.id_factura JOIN productos p
                ON cf.id_producto = p.id_producto
                WHERE f.id_factura = :idFactura
            </query>
        </named-native-query>

        <named-native-query name="Factura.getPdfFacturaConsFinal" result-set-mapping="getPdfFacturaConsFinal">
            <query>
                SELECT f.id_factura as idFactura, f.fecha as fecha, c.cantidad as cantidad, p.nombre_producto as nombreProducto, 
                    p.precio_producto as precioProducto, c.descuento as descuento, c.iva as iva, c.subtotal as subtotal, c.total as total
                FROM factura f JOIN cuerpo_factura c
                ON f.id_factura = c.id_factura JOIN productos p
                ON p.id_producto = c.id_producto JOIN cliente cl
                ON cl.id_cliente = f.id_cliente
                WHERE f.id_factura = :idFactura 
            </query>
        </named-native-query>
    </entity>

    <entity class="com.ProyectoTDSBackend.models.ConsultaExterna">
        <named-native-query name="ConsultaExterna.getConsultaExterna" result-set-mapping="getConsultaExterna">
            <query>
                SELECT ce.id_consexterna as id_consexterna, us.nombres as nombres, ce.historia_clinica as historia_clinica, 
                    ce.fecha as fecha, ce.nombres_profesional as nombresProfesional
     	        FROM usuario us JOIN consulta_externa ce
     	        ON ce.id_usuario = us.id JOIN antec_personales ap
     	        ON ap.id_consexterna = ce.id_consexterna JOIN antec_familiares af
     	        ON af.id_consexterna = ce.id_consexterna JOIN rev_organo_sistem ro
     	        ON ro.id_consexterna = ce.id_consexterna JOIN sigvit_antropometria sa
     	        ON sa.id_consexterna = ce.id_consexterna JOIN exam_fisico_regional ef
     	        ON ef.id_consexterna = ce.id_consexterna JOIN diagnosticos d
     	        ON d.id_consexterna = ce.id_consexterna JOIN plan_tratamiento pt
     	        ON pt.id_consexterna = ce.id_consexterna
	 	        WHERE ce.estado = 'a'
                ORDER BY ce.id_consexterna DESC
            </query>
        </named-native-query>

        <named-native-query name="ConsultaExterna.getConsultaExternaById" result-set-mapping="getConsultaExternaById">
            <query>
                SELECT ce.duracion_consulta as duracionConsulta, ce.nombres_profesional as nombresProfesional, us.identificacion as identificacion,
                    ce.id_consexterna as idConsexterna, ce.establecimiento as establecimiento, us.nombres as nombres, us.sexo as sexo, ce.historia_clinica as historiaClinica,
                    ce.motivo_consulta as motivoConsulta, ce.enfermedad_actual as enfermedadActual, ce.fecha as fecha, ap.clinicos as clinicos,
                    ap.quirurgicos as quirurgicos, af.cardiopatia as cardiopatia, af.diabetes as diabetes, af.enf_cardiovasculares as enfCardiovasculares,
                    af.hipertension as hipertension, af.cancer as cancer, af.tuberculosis as tuberculosis, af.enf_mentales as enfMentales,
                    af.enf_infecciosas as enfInfecciosas, af.malformaciones as malformaciones, af.otros as otros, af.familiares as familiares,
                    ro.organo_sentido as organoSentido, ro.respiratorio as respiratorio, ro.cardiovascular as cardiovascular, ro.digestivo as digestivo,
                    ro.genital as genital, ro.urinario as urinario, ro.musculo_esqueletico as musculoEsqueletico, ro.endocrino as endocrino,
                    ro.hemolenfatico as hemolenfatico, ro.nervioso as nervioso, ro.descripcion as descripcion, sa.fecha_medicion as fechaMedicion,
                    sa.temperatura as temperatura, sa.presion_arterial as presionArterial, sa.pulso as pulso, sa.frec_respiratoria as frecRespiratoria,
                    sa.peso as peso, sa.talla as talla, ef.cabeza as cabeza, ef.cuello as cuello, ef.torax as torax, ef.abdomen as abdomen, 
                    ef.pelvis as pelvis, ef.extremidades as extremidades, ef.observaciones as observaciones, d.descripcion_diagnostico as descripcionDiagnostico,
                    d.cie as cie, d.pre_def as preDef, d.descripcion_pre_def as descripcionPreDef, d.descripcion_pre_def_cie as descripcionPreDefCie,
                    d.descripcion_pre_def_pre_def as descripcionPreDefPreDef, pt.m as m, pt.i as i, pt.l as l, pt.r as r, pt.c as c, pt.t as t, pt.o as o
                FROM usuario us JOIN consulta_externa ce
                ON ce.id_usuario = us.id JOIN antec_personales ap
                ON ap.id_consexterna = ce.id_consexterna JOIN antec_familiares af
                ON af.id_consexterna = ce.id_consexterna JOIN rev_organo_sistem ro
                ON ro.id_consexterna = ce.id_consexterna JOIN sigvit_antropometria sa
                ON sa.id_consexterna = ce.id_consexterna JOIN exam_fisico_regional ef
                ON ef.id_consexterna = ce.id_consexterna JOIN diagnosticos d
                ON d.id_consexterna = ce.id_consexterna JOIN plan_tratamiento pt
                ON pt.id_consexterna = ce.id_consexterna
                WHERE ce.id_consexterna = :idConExt AND ce.estado = 'a'
            </query>
        </named-native-query>

        <named-native-query name="ConsultaExterna.generarPdfConsultaExterna" result-set-mapping="generarPdfConsultaExterna">
            <query>
                SELECT ce.duracion_consulta as duracionConsulta, ce.nombres_profesional as nombresProfesional, us.identificacion as identificacion,
                    ce.id_consexterna as idConsexterna, ce.establecimiento as establecimiento, us.nombres as nombres, us.sexo as sexo, ce.historia_clinica as historiaClinica,
                    ce.motivo_consulta as motivoConsulta, ce.enfermedad_actual as enfermedadActual, ce.fecha as fecha, ap.clinicos as clinicos,
                    ap.quirurgicos as quirurgicos, af.cardiopatia as cardiopatia, af.diabetes as diabetes, af.enf_cardiovasculares as enfCardiovasculares,
                    af.hipertension as hipertension, af.cancer as cancer, af.tuberculosis as tuberculosis, af.enf_mentales as enfMentales,
                    af.enf_infecciosas as enfInfecciosas, af.malformaciones as malformaciones, af.otros as otros, af.familiares as familiares,
                    ro.organo_sentido as organoSentido, ro.respiratorio as respiratorio, ro.cardiovascular as cardiovascular, ro.digestivo as digestivo,
                    ro.genital as genital, ro.urinario as urinario, ro.musculo_esqueletico as musculoEsqueletico, ro.endocrino as endocrino,
                    ro.hemolenfatico as hemolenfatico, ro.nervioso as nervioso, ro.descripcion as descripcion, sa.fecha_medicion as fechaMedicion,
                    sa.temperatura as temperatura, sa.presion_arterial as presionArterial, sa.pulso as pulso, sa.frec_respiratoria as frecRespiratoria,
                    sa.peso as peso, sa.talla as talla, ef.cabeza as cabeza, ef.cuello as cuello, ef.torax as torax, ef.abdomen as abdomen, 
                    ef.pelvis as pelvis, ef.extremidades as extremidades, ef.observaciones as observaciones, d.descripcion_diagnostico as descripcionDiagnostico,
                    d.cie as cie, d.pre_def as preDef, d.descripcion_pre_def as descripcionPreDef, d.descripcion_pre_def_cie as descripcionPreDefCie,
                    d.descripcion_pre_def_pre_def as descripcionPreDefPreDef, pt.m as m, pt.i as i, pt.l as l, pt.r as r, pt.c as c, pt.t as t, pt.o as o
                FROM usuario us JOIN consulta_externa ce
                ON ce.id_usuario = us.id JOIN antec_personales ap
                ON ap.id_consexterna = ce.id_consexterna JOIN antec_familiares af
                ON af.id_consexterna = ce.id_consexterna JOIN rev_organo_sistem ro
                ON ro.id_consexterna = ce.id_consexterna JOIN sigvit_antropometria sa
                ON sa.id_consexterna = ce.id_consexterna JOIN exam_fisico_regional ef
                ON ef.id_consexterna = ce.id_consexterna JOIN diagnosticos d
                ON d.id_consexterna = ce.id_consexterna JOIN plan_tratamiento pt
                ON pt.id_consexterna = ce.id_consexterna
                WHERE ce.id_consexterna = :idConExt AND ce.estado = 'a'
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.Familiares">
        <named-native-query name="Familiares.getAllFamiliares" result-set-mapping="getAllFamiliares">
            <query>
                SELECT f.id_familiares as idFamiliares, us.nombre_usuario as nombres,
                    f.usuario_id as usuarioId, f.iden_usuario_familiar as idenUsuarioFamiliar, f.tipo_familiar as tipoFamiliar
                FROM usuario us JOIN familiares f 
                ON us.id = f.usuario_id 
                WHERE us.id = :usuarioId
            </query>
        </named-native-query>

        <named-native-query name="Familiares.listAllFamilyOfUser" result-set-mapping="listAllFamilyOfUser">
            <query>
                SELECT f.id_familiares as idFamiliares, u.identificacion as identificacion, u. nombres as nombres, f.iden_usuario_familiar as idenUsuarioFamiliar, 
                    f.tipo_familiar as tipoFamiliar, f.usuario_id as usuarioId, f.estado as estado
                FROM usuario u JOIN familiares f
                ON u.id = f.iden_usuario_familiar
                WHERE f.usuario_id = :ui and f.estado = 'a'
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.security.models.Usuario">
        <named-native-query name="Usuario.getDatosTarjetaUser" result-set-mapping="getDatosTarjetaUser">
            <query>
                SELECT us.id as id, r.id_recidencia as idRecidencia, us.nombres as nombres, us.direccion as direccion,
                    us.celular as celular, r.nacionalidad as nacionalidad, r.pais as pais, r.provincia as provincia, 
                    r.canton as canton, r.parroquia as parroquia
                FROM usuario us JOIN residencia r
                ON us.id = r.id_usuario
                WHERE us.identificacion = :identificacion
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.Tarjeta">
        <named-native-query name="Tarjeta.getAllDatosTarjeta" result-set-mapping="getAllDatosTarjeta">
            <query>
                SELECT us.id as id, r.id_recidencia as idRecidencia, us.nombres as nombres, us.direccion as direccion,
                    us.celular as celular, r.nacionalidad as nacionalidad, r.pais as pais, r.provincia as provincia,
                    r.canton as canton, r.parroquia as parroquia, ta.id_tarjeta as idTarjeta, ta.afiliacion as afiliacion, 
                    te.id_tarjeta_especialidad as idTarjetaEspecialidad, te.tipo_especialidad as tipoEspecialidad, ta.estado as estado, 
                    ta.fecha_fin as fechaFin, ta.fecha_inicio as fechaInicio, ta.consultas as consultas
                FROM usuario us JOIN residencia r
                ON us.id = r.id_usuario JOIN tarjeta ta
                ON ta.id_tarjeta = us.id_tarjeta JOIN tarjeta_especialidad te
                ON te.id_tarjeta_especialidad = ta.id_tarjeta_especialidad
                WHERE us.identificacion = :identificacion and ta.estado = 1
            </query>
        </named-native-query>
    </entity>

    <entity class="com.ProyectoTDSBackend.models.Consentimiento">
        <named-native-query name="Consentimiento.getAllDatosOnlyConsentimiento" result-set-mapping="getAllDatosOnlyConsentimiento">
            <query>
                SELECT id_consentimiento as idConsentimiento, cama, canton, cod_ud as codUd, estado, fecha, 
		                institucion_sistema as institucionSistema, numero_historia_clinica as numeroHistoriaClinica, 
		                parroquia, provincia, sala, servicio, unidad_operativa as unidadOperativa, id_usuario as idUsuario
                FROM consentimientos c 
                WHERE c.estado = 'a' ORDER BY 1 DESC;
            </query>
        </named-native-query>

        <named-native-query name="Consentimiento.listDataConsentimiento" result-set-mapping="listDataConsentimiento">
            <query>
                SELECT c.id_consentimiento as idConsentimiento, c.fecha, c.numero_historia_clinica as numHistCli,
                        u.id as usuarioId, u.identificacion, u.nombres
                FROM consentimientos c JOIN usuario u
                ON c.id_usuario = u.id
                WHERE u.estado = 1 AND c.estado = 'a'
                ORDER BY 1 DESC
            </query>
        </named-native-query>
        
        <named-native-query name="Consentimiento.getAllDatosOnlyConsentimientoById" result-set-mapping="getAllDatosOnlyConsentimientoById">
        	<query>
        		SELECT c.id_consentimiento as idConsentimiento, c.cama, c.canton, c.cod_ud as codUd, c.estado, c.fecha, 
						c.institucion_sistema as institucionSistema, c.numero_historia_clinica as numeroHistoriaClinica, 
						c.parroquia, c.provincia, c.sala, c.servicio, c.unidad_operativa as unidadOperativa, c.id_usuario as idUsuario,
						u.nombres, u.identificacion
				FROM consentimientos c JOIN usuario u
				ON u.id = c.id_usuario
				WHERE c.estado = 'a' AND c.id_consentimiento = :idConsentimiento
        	</query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.InformacionTratamiento">
    	<named-native-query name="InformacionTratamiento.getAllDatosOnlyInformacionTratamientoById" result-set-mapping="getAllDatosOnlyInformacionTratamientoById">
        	<query>
        		SELECT i.id_inf_trat as idInfTrat, i.codigo, i.especialidad, i.id_consentimiento_fk as idConsentimientoFk, 
						i.nombre_profesional_trat as nombreProfesionalTrat, i.procedimiento_propuesto as procedimientoPropuesto,
						i.proposito, i.resultado_esperado as resultadoEsperado, riesgo_complicaciones as riesgoComplicaciones, i.telefono
				FROM informacion_tratamientos i JOIN consentimientos c
				ON i.id_consentimiento_fk = c.id_consentimiento
				WHERE c.estado = 'a' AND i.id_consentimiento_fk = :idConsentimientoFk
				ORDER BY 1
        	</query>
        </named-native-query>
    </entity>
</entity-mappings>
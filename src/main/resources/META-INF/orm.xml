<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <entity class="com.ProyectoTDSBackend.models.Factura">
        <named-native-query name="Factura.getPdfFacturaUsuario" result-set-mapping="getPdfFacturaUsuario">
            <query>
                SELECT f.fecha as fecha, us.identificacion as identificacion, us.nombres as nombres, us.celular as celular, us.email as email, f.id_factura as id_factura,
                cl.id_cliente as id_cliente,p.precio_producto as precio_producto, p.nombre_producto as nombre_producto, us.direccion as direccion,cf.cantidad as cantidad, cf.descuento as descuento, cf.iva as iva, cf.subtotal as subtotal, cf.total as total
                FROM usuario us JOIN cliente cl
                ON us.id = cl.id_persona JOIN factura f
                ON f.id_cliente = cl.id_cliente JOIN cuerpo_factura cf
                ON f.id_factura = cf.id_factura JOIN productos p
                ON cf.id_producto = p.id_producto
                WHERE f.id_factura = :idFactura
            </query>
        </named-native-query>

        <named-native-query name="Factura.getPdfFacturaConsFinal" result-set-mapping="getPdfFacturaConsFinal">
            <query>
                SELECT f.id_factura as idFactura, f.fecha as fecha, c.cantidad as cantidad, p.nombre_producto as nombreProducto, 
                p.precio_producto as precioProducto, c.descuento as descuento, c.iva as iva, c.subtotal as subtotal, c.total as total
                FROM factura f JOIN cuerpo_factura c
                ON f.id_factura = c.id_factura JOIN productos p
                ON p.id_producto = c.id_producto JOIN cliente cl
                ON cl.id_cliente = f.id_cliente
                WHERE f.id_factura = :idFactura 
            </query>
        </named-native-query>
    </entity>

    <entity class="com.ProyectoTDSBackend.models.Medicamentos">
        <named-native-query name="Medicamentos.generarPdfMedicamentos" result-set-mapping="generarPdfMedicamentos">
            <query>
                SELECT u.nombres as nombres,m.fecha as fecha,m.hora as hora,m.ini_responsable as ini_responsable ,
                m.abreviatura as abreviatura,m.nombre_medicamento as nombre_medicamento,u.sexo as sexo,
                m.establecimiento as establecimiento
                FROM usuario u 
                INNER JOIN medicamentos m
                ON u.id = m.id_usuario
                where u.identificacion =:iden
            </query>
        </named-native-query>
    </entity>
    
    
    <entity class="com.ProyectoTDSBackend.models.Protocolos">
        <named-native-query name="Protocolos.generarPdfProtocolo" result-set-mapping="generarPdfProtocolo">
            <query>
                Select u.nombres as nombres,p.postoperatorio as postoperatorio,p.escrita as escrita,p.fecha_red as fecha_red,
                p.n_cama as n_cama,p.preoperatorio as preoperatorio,p.realizada as realizada,p.redactado as redactado,
                p.sala as sala,p.servicio as servicio,p.tipo_cirujia as tipo_cirujia,e.anestesiologo as anestesiologo,
                e.cirujano as cirujano, e.fecha as fecha,e.hora_fin as hora_fin,e.hora_inicio as hora_inicio,e.instrumentista as instrumentista,
                e.primer_ayudante as primer_ayudante,e.segundo_ayudante as segundo_ayudante,e.tercer_ayudante as tercer_ayudante,
                e.tipo_anestesia as tipo_anestesia,t.complicaciones as complicaciones,t.dieresis as dieresis,t.examen as examen,
                t.exploracion as exploracion,t.exposicion as exposicion,t.procedimiento as procedimiento,t.sintesis as sintensis
                from protocolo p join usuario u
                on p.id_persona = u.id
                join equipos e on
                e.id_protocolo = p.id_protocolo
                join tipo_quirurgico t on
                t.id_protocolo=p.id_protocolo
                where p.id_protocolo=:proto
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.Evolucion">
        <named-native-query name="Evolucion.generarPdfEvolucionPrescripcion" result-set-mapping="generarPdfEvolucionPrescripcion">
            <query>
                select  e.evolucion as evolucion,e.fecha as fecha,e.hora as hora ,
                e.indicaciones as indicaciones ,e.medicamento_ad as medicamento_ad,u.nombres as nombres,
                u.sexo as sexo,e.establecimiento as establecimiento
                FROM usuario u 
                INNER JOIN evolucion_prescripcion e
                on e.id_usuario=u.id
                where u.identificacion =:iden
            </query>
        </named-native-query>
    </entity>
    
    <entity class="com.ProyectoTDSBackend.models.MedicoConsentimiento">
        <named-native-query name="MedicoConsentimiento.generarPdfConsen" result-set-mapping="generarPdfConsen">
            <query>
                select alergia as alergia ,cedula as cedula, codigo as codigo ,direccion  as direccion
                ,edad as edad, especialidad as especialidad ,fecha as fecha , fecha_nac as fecha_nac
                ,nombre_doc as nombre_doc ,nombrep as nombrep ,cedula_pa as cedula_pa 
                ,procedimientos as procedimientos, telefono as telefono,entidad as entidad from medico_consentimiento 
                where estado='1'and id_medi_c =:idme
            </query>
        </named-native-query>
    </entity>
    
    <entity class="com.ProyectoTDSBackend.models.HistoriaClinica">
        <named-native-query name="HistoriaClinica.generarPdfHistoria" result-set-mapping="generarPdfHistoria">
            <query>
                Select u.nombres as nombres,h.alergia as alergia,h.apf as apf ,h.app as app ,h.edad as edad,h.enfermedad as enfermedad 
                ,h.estado_civil as estado_civil,
                h.fc as fc,h.fecha as fecha,h.fr as fr,h.habitos as habitos,h.motivo as motivo,h.num_cli as num_cli,h.procedencia as procedencia,h.religion as religion,
                h.residencia as residencia,
                h.spo2 as spo2 ,h.ta as ta,h.t as t,h.tipo_sangre as tipo_sangre,h.examen as examen,h.dr as dr,h.realizado as realizado,h.dx as dx
                from historia_clinica h join usuario u 
                on h.id_persona=u.id
                where h.id_historia=:idHi
            </query>
        </named-native-query>
    </entity>
    
    <entity class="com.ProyectoTDSBackend.models.Odontologia">
        <named-native-query name="Odontologia.generarPdfOdon" result-set-mapping="generarPdfOdon">
            <query>
                Select o.codigo as codigo,o.diagnostico as diagnostico,o.enfermedad as enfermedad,o.establecimiento as establecimeinto,
                o.fecha as fecha,u.nombres as nombres,u.sexo as sexo,h.num_cli as num_cli,h.edad as edad,o.frec_cardiaca as frec_cardiaca,o.frec_respira as frec_respira,
                o.motivo_consulta as motivo_consulta,o.prescipcion as prescipcion,o.presion_arterial as presion_arterial,o.procedimientos as procedimientos,
                o.sesion as sesion,o.temperatura as temperatura,i.alergia_anes as alergia_anes,i.alergiaa as alergiaa,i.asma as asma,i.diabetes as diabetes,
                i.descripcion as descripcion,i.enf_car as enf_car,i.hemorragias as hemorragias,i.otros as otros,i.tuberculosis as tuberculosis,i.vh_sida as vh_sida,
                e.a_t_m as a_t_m,e.carrillos as carrillos, e.descripcion as descripcione,e.glandulas_sa as glandulas_sa,e.glangios as glangios,e.labio as labio,
                e.lengua as lengua,e.maxilar_su as maxilar_su,e.maxilar_in as maxilar_in,e.mejillas as mejillas,e.oro as oro ,e.paladar as paladar,e.piso as piso,
                s.anglei as anglei,s.angleii as angleii,s.angleiii as angleiii,s.cal1 as cal1,s.cal2 as cal2,s.cal3 as cal3, s.cal4 as cal4,s.cal5 as cal5,s.cal6 as cal6,s.gin1 as gin1,
                s.gin2 as gin2,s.gin3 as gin3,s.gin4 as gin4,s.gin5 as gin5,s.gin6 as gin6,s.leve as leve,s.levef as levef,s.moderada as moderada,s.moderadaf as moderadaf,s.p11 as p11,
                s.p16 as p16,s.p17 as p17 ,s.p21 as p21,s.p26 as p26,s.p27 as p27,s.p31 as p31,s.p36 as p36,s.p37 as p37,s.p41 as p41,s.p46 as p46,s.p47 as p47,
                s.p55 as p55,s.p65 as p65,s.p71 as p71,s.p75 as p75,s.p85 as p85,s.placa1 as placa1,s.placa2 as placa2, s.placa3 as placa3,s.placa4 as placa4,
                s.placa5 as placa5,s.placa6 as placa6,s.severa as severa,s.severaf as severaf ,s.totalg1 as totalg1,s.totalp1 as totalp1,s.totalc2 as totalc2,s.p51 as p51,d.d as d,d.c as c,d.p as p ,d.o as o,d.totald as totald ,d.d1 as d1,d.c1 as c1,d.p1 as p1,d.o1 as o1 ,d.totald1 as totald1,
                p.biometrica as biometrica,p.otros as otrosp,p.quimicas as quimicas,p.descripcion as descripcionp,p.rayosx as rayosx,
                c.cie1 as cie1,c.cie2 as cie2 ,c.def as def,c.def1 as def1, c.descripcion1 as descripcion1 ,c.descripcion2 as descripcion2,c.fechaa as fechaa,
                c.fechac as fechac,c.pre1 as pre1,c.pre2 as pre2,c.profesional as profesional

                from odontologia o join 
                usuario u on o.id_usuario = u.id
                join historia_clinica h 
                on h.id_persona = u.id 
                join indicef i on
                i.id_odontologia = o.id_odontologia
                join examen_esto e on 
                e.id_odontologia = o.id_odontologia
                join salud s on 
                s.id_odontologia = o.id_odontologia
                join indices d on 
                d.id_odontologia = o.id_odontologia
                join planes p on
                p.id_odontologia = o.id_odontologia
                join diagnosticoo c on 
                c.id_odontologia = o.id_odontologia
                where o.id_odontologia=:idOdon
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.ConsultaExterna">
        <named-native-query name="ConsultaExterna.getConsultaExterna" result-set-mapping="getConsultaExterna">
            <query>
                SELECT ce.id_consexterna as id_consexterna, us.nombres as nombres, ce.historia_clinica as historia_clinica, 
                ce.fecha as fecha, ce.nombres_profesional as nombresProfesional
                FROM usuario us JOIN consulta_externa ce
                ON ce.id_usuario = us.id JOIN antec_personales ap
                ON ap.id_consexterna = ce.id_consexterna JOIN antec_familiares af
                ON af.id_consexterna = ce.id_consexterna JOIN rev_organo_sistem ro
                ON ro.id_consexterna = ce.id_consexterna JOIN sigvit_antropometria sa
                ON sa.id_consexterna = ce.id_consexterna JOIN exam_fisico_regional ef
                ON ef.id_consexterna = ce.id_consexterna JOIN diagnosticos d
                ON d.id_consexterna = ce.id_consexterna JOIN plan_tratamiento pt
                ON pt.id_consexterna = ce.id_consexterna
                WHERE ce.estado = 'a'
                ORDER BY ce.id_consexterna DESC
            </query>
        </named-native-query>

        <named-native-query name="ConsultaExterna.getConsultaExternaById" result-set-mapping="getConsultaExternaById">
            <query>
                SELECT ce.duracion_consulta as duracionConsulta, ce.nombres_profesional as nombresProfesional, us.identificacion as identificacion,
                ce.id_consexterna as idConsexterna, ce.establecimiento as establecimiento, us.nombres as nombres, us.sexo as sexo, ce.historia_clinica as historiaClinica,
                ce.motivo_consulta as motivoConsulta, ce.enfermedad_actual as enfermedadActual, ce.fecha as fecha, ap.clinicos as clinicos,
                ap.quirurgicos as quirurgicos, af.cardiopatia as cardiopatia, af.diabetes as diabetes, af.enf_cardiovasculares as enfCardiovasculares,
                af.hipertension as hipertension, af.cancer as cancer, af.tuberculosis as tuberculosis, af.enf_mentales as enfMentales,
                af.enf_infecciosas as enfInfecciosas, af.malformaciones as malformaciones, af.otros as otros, af.familiares as familiares,
                ro.organo_sentido as organoSentido, ro.respiratorio as respiratorio, ro.cardiovascular as cardiovascular, ro.digestivo as digestivo,
                ro.genital as genital, ro.urinario as urinario, ro.musculo_esqueletico as musculoEsqueletico, ro.endocrino as endocrino,
                ro.hemolenfatico as hemolenfatico, ro.nervioso as nervioso, ro.descripcion as descripcion, sa.fecha_medicion as fechaMedicion,
                sa.temperatura as temperatura, sa.presion_arterial as presionArterial, sa.pulso as pulso, sa.frec_respiratoria as frecRespiratoria,
                sa.peso as peso, sa.talla as talla, ef.cabeza as cabeza, ef.cuello as cuello, ef.torax as torax, ef.abdomen as abdomen, 
                ef.pelvis as pelvis, ef.extremidades as extremidades, ef.observaciones as observaciones, d.descripcion_diagnostico as descripcionDiagnostico,
                d.cie as cie, d.pre_def as preDef, d.descripcion_pre_def as descripcionPreDef, d.descripcion_pre_def_cie as descripcionPreDefCie,
                d.descripcion_pre_def_pre_def as descripcionPreDefPreDef, pt.m as m, pt.i as i, pt.l as l, pt.r as r, pt.c as c, pt.t as t, pt.o as o
                FROM usuario us JOIN consulta_externa ce
                ON ce.id_usuario = us.id JOIN antec_personales ap
                ON ap.id_consexterna = ce.id_consexterna JOIN antec_familiares af
                ON af.id_consexterna = ce.id_consexterna JOIN rev_organo_sistem ro
                ON ro.id_consexterna = ce.id_consexterna JOIN sigvit_antropometria sa
                ON sa.id_consexterna = ce.id_consexterna JOIN exam_fisico_regional ef
                ON ef.id_consexterna = ce.id_consexterna JOIN diagnosticos d
                ON d.id_consexterna = ce.id_consexterna JOIN plan_tratamiento pt
                ON pt.id_consexterna = ce.id_consexterna
                WHERE ce.id_consexterna = :idConExt AND ce.estado = 'a'
            </query>
        </named-native-query>

        <named-native-query name="ConsultaExterna.generarPdfConsultaExterna" result-set-mapping="generarPdfConsultaExterna">
            <query>
                SELECT ce.duracion_consulta as duracionConsulta, ce.nombres_profesional as nombresProfesional, us.identificacion as identificacion,
                ce.id_consexterna as idConsexterna, ce.establecimiento as establecimiento, us.nombres as nombres, us.sexo as sexo, ce.historia_clinica as historiaClinica,
                ce.motivo_consulta as motivoConsulta, ce.enfermedad_actual as enfermedadActual, ce.fecha as fecha, ap.clinicos as clinicos,
                ap.quirurgicos as quirurgicos, af.cardiopatia as cardiopatia, af.diabetes as diabetes, af.enf_cardiovasculares as enfCardiovasculares,
                af.hipertension as hipertension, af.cancer as cancer, af.tuberculosis as tuberculosis, af.enf_mentales as enfMentales,
                af.enf_infecciosas as enfInfecciosas, af.malformaciones as malformaciones, af.otros as otros, af.familiares as familiares,
                ro.organo_sentido as organoSentido, ro.respiratorio as respiratorio, ro.cardiovascular as cardiovascular, ro.digestivo as digestivo,
                ro.genital as genital, ro.urinario as urinario, ro.musculo_esqueletico as musculoEsqueletico, ro.endocrino as endocrino,
                ro.hemolenfatico as hemolenfatico, ro.nervioso as nervioso, ro.descripcion as descripcion, sa.fecha_medicion as fechaMedicion,
                sa.temperatura as temperatura, sa.presion_arterial as presionArterial, sa.pulso as pulso, sa.frec_respiratoria as frecRespiratoria,
                sa.peso as peso, sa.talla as talla, ef.cabeza as cabeza, ef.cuello as cuello, ef.torax as torax, ef.abdomen as abdomen, 
                ef.pelvis as pelvis, ef.extremidades as extremidades, ef.observaciones as observaciones, d.descripcion_diagnostico as descripcionDiagnostico,
                d.cie as cie, d.pre_def as preDef, d.descripcion_pre_def as descripcionPreDef, d.descripcion_pre_def_cie as descripcionPreDefCie,
                d.descripcion_pre_def_pre_def as descripcionPreDefPreDef, pt.m as m, pt.i as i, pt.l as l, pt.r as r, pt.c as c, pt.t as t, pt.o as o
                FROM usuario us JOIN consulta_externa ce
                ON ce.id_usuario = us.id JOIN antec_personales ap
                ON ap.id_consexterna = ce.id_consexterna JOIN antec_familiares af
                ON af.id_consexterna = ce.id_consexterna JOIN rev_organo_sistem ro
                ON ro.id_consexterna = ce.id_consexterna JOIN sigvit_antropometria sa
                ON sa.id_consexterna = ce.id_consexterna JOIN exam_fisico_regional ef
                ON ef.id_consexterna = ce.id_consexterna JOIN diagnosticos d
                ON d.id_consexterna = ce.id_consexterna JOIN plan_tratamiento pt
                ON pt.id_consexterna = ce.id_consexterna
                WHERE ce.id_consexterna = :idConExt AND ce.estado = 'a'
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.Familiares">
        <named-native-query name="Familiares.getAllFamiliares" result-set-mapping="getAllFamiliares">
            <query>
                SELECT f.id_familiares as idFamiliares, us.nombre_usuario as nombres,
                f.usuario_id as usuarioId, f.iden_usuario_familiar as idenUsuarioFamiliar, f.tipo_familiar as tipoFamiliar
                FROM usuario us JOIN familiares f 
                ON us.id = f.usuario_id 
                WHERE us.id = :usuarioId
            </query>
        </named-native-query>

        <named-native-query name="Familiares.listAllFamilyOfUser" result-set-mapping="listAllFamilyOfUser">
            <query>
                SELECT f.id_familiares as idFamiliares, u.identificacion as identificacion, u. nombres as nombres, f.iden_usuario_familiar as idenUsuarioFamiliar, 
                f.tipo_familiar as tipoFamiliar, f.usuario_id as usuarioId, f.estado as estado
                FROM usuario u JOIN familiares f
                ON u.id = f.iden_usuario_familiar
                WHERE f.usuario_id = :ui and f.estado = 'a'
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.security.models.Usuario">
        <named-native-query name="Usuario.getDatosTarjetaUser" result-set-mapping="getDatosTarjetaUser">
            <query>
                SELECT us.id as id, r.id_recidencia as idRecidencia, us.nombres as nombres, us.direccion as direccion,
                us.celular as celular, r.nacionalidad as nacionalidad, r.pais as pais, r.provincia as provincia, 
                r.canton as canton, r.parroquia as parroquia
                FROM usuario us JOIN residencia r
                ON us.id = r.id_usuario
                WHERE us.identificacion = :identificacion
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.Tarjeta">
        <named-native-query name="Tarjeta.getAllDatosTarjeta" result-set-mapping="getAllDatosTarjeta">
            <query>
                SELECT us.id as id, r.id_recidencia as idRecidencia, us.nombres as nombres, us.direccion as direccion,
                us.celular as celular, r.nacionalidad as nacionalidad, r.pais as pais, r.provincia as provincia,
                r.canton as canton, r.parroquia as parroquia, ta.id_tarjeta as idTarjeta, ta.afiliacion as afiliacion, 
                te.id_tarjeta_especialidad as idTarjetaEspecialidad, te.tipo_especialidad as tipoEspecialidad, ta.estado as estado, 
                ta.fecha_fin as fechaFin, ta.fecha_inicio as fechaInicio, ta.consultas as consultas
                FROM usuario us JOIN residencia r
                ON us.id = r.id_usuario JOIN tarjeta ta
                ON ta.id_tarjeta = us.id_tarjeta JOIN tarjeta_especialidad te
                ON te.id_tarjeta_especialidad = ta.id_tarjeta_especialidad
                WHERE us.identificacion = :identificacion and ta.estado = 1
            </query>
        </named-native-query>
    </entity>

    <entity class="com.ProyectoTDSBackend.models.Consentimiento">
        <named-native-query name="Consentimiento.getAllDatosOnlyConsentimiento" result-set-mapping="getAllDatosOnlyConsentimiento">
            <query>
                SELECT id_consentimiento as idConsentimiento, cama, canton, cod_ud as codUd, estado, fecha, 
                institucion_sistema as institucionSistema, numero_historia_clinica as numeroHistoriaClinica, 
                parroquia, provincia, sala, servicio, unidad_operativa as unidadOperativa, id_usuario as idUsuario
                FROM consentimientos c 
                WHERE c.estado = 'a' ORDER BY 1 DESC;
            </query>
        </named-native-query>

        <named-native-query name="Consentimiento.listDataConsentimiento" result-set-mapping="listDataConsentimiento">
            <query>
                SELECT c.id_consentimiento as idConsentimiento, c.fecha, c.numero_historia_clinica as numHistCli,
                u.id as usuarioId, u.identificacion, u.nombres
                FROM consentimientos c JOIN usuario u
                ON c.id_usuario = u.id
                WHERE u.estado = 1 AND c.estado = 'a'
                ORDER BY 1 DESC
            </query>
        </named-native-query>
        
        <named-native-query name="Consentimiento.generarPdfConsentimiento" result-set-mapping="generarPdfConsentimiento">
            <query>
                SELECT c.id_consentimiento as id_consetimiento,c.institucion_sistema as institucionsistema, c.unidad_operativa as unidadoperativa,
                c.cod_ud as codud,c.canton as canton,c.parroquia as parroquia,c.provincia as provincia,c.numero_historia_clinica as numerohistoriaclinica, 
                u.nombres as nombres, c.sala as sala, c.servicio as servicio, c.cama as cama,c.fecha as fecha,
                i.proposito,i.procedimiento_propuesto,i.resultado_esperado,i.riesgo_complicaciones,i.nombre_profesional_trat,i.especialidad,i.telefono,i.codigo
               
                FROM consentimientos c JOIN usuario u
                ON u.id = c.id_usuario
                JOIN  informacion_tratamientos i
                on i.id_consentimiento_fk=c.id_consentimiento
                WHERE c.estado = 'a' and c.id_consentimiento=:idCon
                and i.id_inf_trat='1' 
                and i.id_inf_trat='2' 
                
            </query>
        </named-native-query>
        <named-native-query name="Consentimiento.getAllDatosOnlyConsentimientoById" result-set-mapping="getAllDatosOnlyConsentimientoById">
            <query>
                SELECT c.id_consentimiento as idConsentimiento, c.cama, c.canton, c.cod_ud as codUd, c.estado, c.fecha, 
                c.institucion_sistema as institucionSistema, c.numero_historia_clinica as numeroHistoriaClinica, 
                c.parroquia, c.provincia, c.sala, c.servicio, c.unidad_operativa as unidadOperativa, c.id_usuario as idUsuario,
                u.nombres, u.identificacion
                FROM consentimientos c JOIN usuario u
                ON u.id = c.id_usuario
                WHERE c.estado = 'a' AND c.id_consentimiento = :idConsentimiento
            </query>
        </named-native-query>
    </entity>
    <entity class="com.ProyectoTDSBackend.models.InformacionTratamiento">
        <named-native-query name="InformacionTratamiento.getAllDatosOnlyInformacionTratamientoById" result-set-mapping="getAllDatosOnlyInformacionTratamientoById">
            <query>
                SELECT i.id_inf_trat as idInfTrat, i.codigo, i.especialidad, i.id_consentimiento_fk as idConsentimientoFk, 
                i.nombre_profesional_trat as nombreProfesionalTrat, i.procedimiento_propuesto as procedimientoPropuesto,
                i.proposito, i.resultado_esperado as resultadoEsperado, riesgo_complicaciones as riesgoComplicaciones, i.telefono
                FROM informacion_tratamientos i JOIN consentimientos c
                ON i.id_consentimiento_fk = c.id_consentimiento
                WHERE c.estado = 'a' AND i.id_consentimiento_fk = :idConsentimientoFk
                ORDER BY 1
            </query>
        </named-native-query>
    </entity>
</entity-mappings>